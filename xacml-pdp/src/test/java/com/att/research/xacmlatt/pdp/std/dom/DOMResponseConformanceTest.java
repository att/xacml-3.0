/*
 *
 *          Copyright (c) 2013,2019, 2023  AT&T Knowledge Ventures
 *                     SPDX-License-Identifier: MIT
 */
package com.att.research.xacmlatt.pdp.std.dom;


import static org.assertj.core.api.Assertions.assertThat;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;

import org.junit.jupiter.api.Test;

import com.att.research.xacml.api.Response;
import com.att.research.xacml.std.dom.DOMResponse;

/**
 * Tests for handling the XML version of the XACML Response object.
 * 
 * TO RUN - use jUnit
 * In Eclipse select this file or the enclosing directory, right-click and select Run As/JUnit Test
 * 
 * Normally the Response is generated by the PDP and returned through the RESTful interface as JSON.
 * Testing of the XML interface is minimal and not complete.
 * 
 */
public class DOMResponseConformanceTest {
	
	// where to find the conformance test XML files
	private final String CONFORMANCE_DIRECTORY_PATH = "src/test/resources/testsets/conformance/xacml3.0-ct-v.0.4";
	
	private final File conformanceDirectory = new File(CONFORMANCE_DIRECTORY_PATH);
	
	// The request object output from each test conversion from JSON string
	Response response;
	
	// Load the Conformance test responses into Response objects, generate the output XML for that Response and compare with the original files.
	@Test
	public void testDOMResponse() throws Exception {
		// run through each XML file
		//	- load the file from XML into an internal Response object
		//	- generate the XML representation from that Response object
		// 	- reload the file into a String
		//	- compare the 2 XML strings
		Response xmlResponse = null;
		for (File f : getResponsesInDirectory(conformanceDirectory)) {
			StringBuffer sb = new StringBuffer();
			try (BufferedReader br = new BufferedReader(new FileReader(f))) {
				String line;
				while ((line = br.readLine()) != null) {
					sb.append(line + "\n");
				}
			}
			
			String xmlFromFile = sb.toString();
			
			try {
				// load XML into a Response object
				xmlResponse = DOMResponse.load(xmlFromFile);
			} catch (Exception e) {
				// if XML does not load, just note it and continue with next file
				System.out.println("XML file did not load: '" + f.getName() + "  e=" + e);
				continue;
			}
			
			// create String version from the Response object
			String xmlResponseString = DOMResponse.toString(xmlResponse, false);
			
			// Comparing the string directly to the String from the file is difficult.
			// We can minimize the problems with newlines and whitespace, but we have other issues with how various object values are represented.
			// For instance, and input double of "23.50" is output as "23.5" which is the same value but not identical strings.
			// Therefore we take the XML output and use it to create a new Response object, then compare the two objects.

			Response reGeneratedResponse = DOMResponse.load(xmlResponseString);
			
			assertThat(xmlResponse).isEqualTo(reGeneratedResponse);
		}			
	}
	
	private List<File> getResponsesInDirectory(File directory) {
		List<File> fileList = new ArrayList<File>();
		
		for (File f : directory.listFiles()) {
			if (f.isDirectory()) {
				List<File> subDirList = getResponsesInDirectory(f);
				fileList.addAll(subDirList);
			}
			if (f.getName().endsWith("Response.xml")) {
				fileList.add(f);
			}
		}
		return fileList;
		
	}
	
	
}
