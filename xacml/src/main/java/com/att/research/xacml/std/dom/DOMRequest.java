/*
 *
 *          Copyright (c) 2013,2019-2020  AT&T Knowledge Ventures
 *                     SPDX-License-Identifier: MIT
 */
package com.att.research.xacml.std.dom;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Collection;
import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.att.research.xacml.api.Request;
import com.att.research.xacml.api.XACML3;
import com.att.research.xacml.std.StdMutableRequest;
import com.att.research.xacml.std.StdRequest;
import com.att.research.xacml.util.MainUtils;

/**
 * DOMRequest is used to convert XML into {@link com.att.research.xacml.api.Request} objects.
 * The {@link com.att.research.xacml.api.Request} objects returned by this class are instances of
 * {@link com.att.research.xacml.std.StdMutableRequest}, not <code>DOMRequest</code>.
 * Object instances are generated by loading a file, string, InputStream, or XML Node tree representing the Request.
 * 
 * 
 * @author car
 * @version $Revision: 1.3 $
 */
public class DOMRequest {
	private static final Logger logger	= LoggerFactory.getLogger(DOMRequest.class);
	
	private static final String MSG_UNEXPECTED = "Unexpected element {}";
	
	/*
	 * Prevent creation of instances - this class contains only static methods that return other object types.
	 */
	protected DOMRequest() {
	}
	
	/**
	 * Parse and XML string into a {@link com.att.research.xacml.api.Request} object.
	 * 
	 * @param xmlString String of xml to load
	 * @return Request Returns a Request
	 * @throws DOMStructureException Throws if the xml is syntactically incorrect
	 */
	public static Request load(String xmlString) throws DOMStructureException {
		Request request = null;
		try (InputStream is = new ByteArrayInputStream(xmlString.getBytes(StandardCharsets.UTF_8))) {
			request = DOMRequest.load(is);
		} catch (IOException e) {
			throw new DOMStructureException(e);
		}
		return request;
	}
	
	/**
	 * Read a file containing the XML description of a XACML Request and parse it into a {@link com.att.research.xacml.api.Request} Object.
	 * 
	 * This is only used for testing.  
	 * In normal operation a Request arrives through the RESTful interface and is processed using <code>load(String xmlString)</code>.
	 * 
	 * @param fileRequest A File containing XACML
	 * @return Request Returns a request
	 * @throws DOMStructureException Throws if the xml is syntactically incorrect
	 */
	public static Request load(File fileRequest) throws DOMStructureException {
		Request request = null;
		try (FileInputStream fis = new FileInputStream(fileRequest)) {
			request = DOMRequest.load(fis);
		} catch (IOException ex) {
			throw new DOMStructureException("Exception loading File Request: " + ex.getMessage(), ex);
		}
		return request;
	}
	
	/**
	 * Read characters from the given <code>InputStream</code> and parse them into an XACML {@link com.att.research.xacml.api.Request} object.
	 * 
	 * @param is InputStream of xml
     * @return Request Returns a request
     * @throws DOMStructureException Throws if the xml is syntactically incorrect
	 */
	public static Request load(InputStream is) throws DOMStructureException {
		/*
		 * Get the DocumentBuilderFactory
		 */
		DocumentBuilderFactory documentBuilderFactory	= DocumentBuilderFactory.newInstance();
		documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
		documentBuilderFactory.setNamespaceAware(true);
		
		/*
		 * Get the DocumentBuilder
		 */
		DocumentBuilder documentBuilder	= null;
		try {
			documentBuilder	= documentBuilderFactory.newDocumentBuilder();
		} catch (Exception ex) {
			throw new DOMStructureException("Exception creating DocumentBuilder: " + ex.getMessage(), ex);
		}
		
		/*
		 * Parse the XML file
		 */
		Document document	= null;
		Request request	= null;
		try {
			document	= documentBuilder.parse(is);
			if (document == null) {
				throw new Exception("Null document returned");
			}
			
			Node rootNode	= document.getFirstChild();
			if (rootNode == null) {
				throw new Exception("No child in document");
			}
			
			if (DOMUtil.isInNamespace(rootNode, XACML3.XMLNS)) {
				if (XACML3.ELEMENT_REQUEST.equals(rootNode.getLocalName())) {
					request	= DOMRequest.newInstance(rootNode);
					if (request == null) {
						throw new DOMStructureException("Failed to parse Request");
					}
				} else {
					throw DOMUtil.newUnexpectedElementException(rootNode);
				}
			} else {
				throw DOMUtil.newUnexpectedElementException(rootNode);
			}
		} catch (Exception ex) {
			throw new DOMStructureException("Exception loading Request: " + ex.getMessage(), ex);
		}
		return request;
	}
	
	/**
	 * Creates a new {@link com.att.research.xacml.api.Request} by parsing the given <code>Node</code> representing a XACML Request element.
	 * 
	 * @param nodeRequest the <code>Node</code> representing the XACML Request element.
	 * @return a new {@link com.att.research.xacml.std.StdMutableRequest} parsed from the given <code>Node</code>
	 * @throws DOMStructureException if the conversion cannot be made
	 */
	public static Request newInstance(Node nodeRequest) throws DOMStructureException {
		Element	elementRequest	= DOMUtil.getElement(nodeRequest);
		boolean bLenient		= DOMProperties.isLenient();
		
		StdMutableRequest stdMutableRequest	= new StdMutableRequest();

		stdMutableRequest.setReturnPolicyIdList(DOMUtil.getBooleanAttribute(elementRequest, XACML3.ATTRIBUTE_RETURNPOLICYIDLIST, !bLenient));
		stdMutableRequest.setCombinedDecision(DOMUtil.getBooleanAttribute(elementRequest, XACML3.ATTRIBUTE_COMBINEDDECISION, !bLenient));
		
		NodeList children	= elementRequest.getChildNodes();
		int numChildren;
		boolean sawAttributes	= false;
		if (children != null && (numChildren = children.getLength()) > 0) {
			for (int i = 0 ; i < numChildren ; i++) {
				Node child	= children.item(i);
				if (DOMUtil.isElement(child)) {
					if (DOMUtil.isInNamespace(child, XACML3.XMLNS)) {
						String childName	= child.getLocalName();
						if (XACML3.ELEMENT_ATTRIBUTES.equals(childName)) {
							stdMutableRequest.add(DOMRequestAttributes.newInstance(child));
							sawAttributes	= true;
						} else if (XACML3.ELEMENT_REQUESTDEFAULTS.equals(childName)) {
							stdMutableRequest.setRequestDefaults(DOMRequestDefaults.newInstance(child));
						} else if (XACML3.ELEMENT_MULTIREQUESTS.equals(childName)) {
							NodeList grandchildren	= child.getChildNodes();
							int numGrandchildren;
							if (grandchildren != null && (numGrandchildren = grandchildren.getLength()) > 0) {
								for (int j = 0 ; j < numGrandchildren ; j++) {
									Node grandchild	= grandchildren.item(j);
									if (DOMUtil.isElement(grandchild)) {
										if (DOMUtil.isInNamespace(grandchild, XACML3.XMLNS)) {
											if (XACML3.ELEMENT_REQUESTREFERENCE.equals(grandchild.getLocalName())) {
												stdMutableRequest.add(DOMRequestReference.newInstance(grandchild));												
											} else {
												if (!bLenient) {
													throw DOMUtil.newUnexpectedElementException(grandchild, nodeRequest);
												}
											}
										} else {
											if (!bLenient) {
												throw DOMUtil.newUnexpectedElementException(grandchild, nodeRequest);
											}
										}
									}
								}
							}
						} else {
							if (!bLenient) {
								throw DOMUtil.newUnexpectedElementException(child, nodeRequest);
							}
						}
					} else {
						if (!bLenient) {
							throw DOMUtil.newUnexpectedElementException(child, nodeRequest);
						}
					}
				}
			}
		}
		if (!sawAttributes && !bLenient) {
			throw DOMUtil.newMissingElementException(nodeRequest, XACML3.XMLNS, XACML3.ELEMENT_ATTRIBUTES);
		}
		
		return new StdRequest(stdMutableRequest);
	}
	
	/**
	 * Convert XACML2 into XACML3.
	 * 
	 * @param nodeRequest Node object to repair
	 * @return True if repair succeeded
	 * @throws DOMStructureException If unable to repair
	 */
	public static boolean repair(Node nodeRequest) throws DOMStructureException {
		Element	elementRequest	= DOMUtil.getElement(nodeRequest);
		boolean result			= false;
		
		result					= DOMUtil.repairBooleanAttribute(elementRequest, XACML3.ATTRIBUTE_RETURNPOLICYIDLIST, false, logger) || result;
		result					= DOMUtil.repairBooleanAttribute(elementRequest, XACML3.ATTRIBUTE_COMBINEDDECISION, false, logger) || result;
		
		NodeList children	= elementRequest.getChildNodes();
		int numChildren;
		boolean sawAttributes	= false;
		if (children != null && (numChildren = children.getLength()) > 0) {
			for (int i = 0 ; i < numChildren ; i++) {
				Node child	= children.item(i);
				if (DOMUtil.isElement(child)) {
					if (DOMUtil.isInNamespace(child, XACML3.XMLNS)) {
						String childName	= child.getLocalName();
						if (XACML3.ELEMENT_ATTRIBUTES.equals(childName)) {
							result	= DOMRequestAttributes.repair(child) || result;
							sawAttributes	= true;
						} else if (XACML3.ELEMENT_REQUESTDEFAULTS.equals(childName)) {
							result	= result || DOMRequestDefaults.repair(child);
						} else if (XACML3.ELEMENT_MULTIREQUESTS.equals(childName)) {
							NodeList grandchildren	= child.getChildNodes();
							int numGrandchildren;
							if (grandchildren != null && (numGrandchildren = grandchildren.getLength()) > 0) {
								for (int j = 0 ; j < numGrandchildren ; j++) {
									Node grandchild	= grandchildren.item(j);
									if (DOMUtil.isElement(grandchild)) {
										if (DOMUtil.isInNamespace(grandchild, XACML3.XMLNS)) {
											if (XACML3.ELEMENT_REQUESTREFERENCE.equals(grandchild.getLocalName())) {
												result	= DOMRequestReference.repair(grandchild) || result;
											} else {
												logger.warn(MSG_UNEXPECTED, grandchild.getNodeName());
												child.removeChild(grandchild);
												result	= true;
											}
										} else {
											logger.warn(MSG_UNEXPECTED, grandchild.getNodeName());
											child.removeChild(grandchild);
											result	= true;
										}
									}
								}
							}
						} else {
							logger.warn(MSG_UNEXPECTED, child.getNodeName());
							elementRequest.removeChild(child);
							result	= true;
						}
					} else {
						logger.warn(MSG_UNEXPECTED, child.getNodeName());
						elementRequest.removeChild(child);
						result	= true;
					}
				}
			}
		}
		if (!sawAttributes) {
			throw DOMUtil.newMissingElementException(nodeRequest, XACML3.XMLNS, XACML3.ELEMENT_ATTRIBUTES);
		}
		
		return result;
	}
	
	/**
	 * Unit test program to load an XML file containing a XACML Request document. This should only be
	 * used in a local environment and not in production.
	 * 
	 * @param args the list of Request files to load and parse
	 * @throws ParserConfigurationException Exception when parsing the configuration
	 */
	public static void main(String[] args) throws ParserConfigurationException { //NOSONAR
	    Collection<String> santized = MainUtils.santizeArguments(args);
	    if (santized.isEmpty()) {
	        return;
	    }
		DocumentBuilderFactory	documentBuilderFactory	= DocumentBuilderFactory.newInstance();
        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
        documentBuilderFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
		documentBuilderFactory.setNamespaceAware(true);
		for (String xmlFileName: santized) {
			File	fileXml	= new File(xmlFileName);
			if (!fileXml.exists() || !fileXml.canRead()) {
				logger.error("Input file \"{}\\\" does not exist or is unreadable.", fileXml.getAbsolutePath());
				continue;
			}
			logger.debug("{}:", fileXml.getAbsolutePath());
			try {
				DocumentBuilder	documentBuilder	= documentBuilderFactory.newDocumentBuilder();
				assert(documentBuilder.isNamespaceAware());
				Document documentRequest		= documentBuilder.parse(fileXml);
				assert(documentRequest != null);
				
				NodeList children				= documentRequest.getChildNodes();
				if (children == null || children.getLength() == 0) {
					logger.error("No Requests found in \"{}\\\"", fileXml.getAbsolutePath());
					continue;
				} else if (children.getLength() > 1) {
					logger.error("Multiple Requests found in \"{}\\\"", fileXml.getAbsolutePath());
				}
				Node nodeRequest				= children.item(0);
				if (!nodeRequest.getLocalName().equals(XACML3.ELEMENT_REQUEST)) {
					logger.error("\"{}\\\" is not a Request", fileXml.getAbsolutePath());
					continue;
				}
				
				Request domRequest			= DOMRequest.newInstance(nodeRequest);
				logger.debug("{}", domRequest);
			} catch (Exception ex) {
				logger.error("Processing exception", ex);
			}
		}
	}

}
