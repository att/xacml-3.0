/*
 *
 *          Copyright (c) 2013,2019-2020  AT&T Knowledge Ventures
 *                     SPDX-License-Identifier: MIT
 */
package com.att.research.xacml.std.jaxp;

import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.Iterator;
import javax.xml.XMLConstants;
import jakarta.xml.bind.JAXBContext;
import jakarta.xml.bind.JAXBElement;
import jakarta.xml.bind.JAXBException;
import jakarta.xml.bind.Unmarshaller;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import oasis.names.tc.xacml._3_0.core.schema.wd_17.AttributesType;
import oasis.names.tc.xacml._3_0.core.schema.wd_17.RequestReferenceType;
import oasis.names.tc.xacml._3_0.core.schema.wd_17.RequestType;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.att.research.xacml.std.StdMutableRequest;
import com.att.research.xacml.util.MainUtils;

/**
 * JaxpRequest extends {@link com.att.research.xacml.std.StdMutableRequest} with methods for creation from JAXP elements.
 * 
 * @author car
 * @version $Revision: 1.1 $
 */
public class JaxpRequest extends StdMutableRequest {
	private static Logger	logger	= LoggerFactory.getLogger(JaxpRequest.class);
	
	public JaxpRequest() {
	    // EMPTY
	}
	
	public static JaxpRequest newInstance(RequestType requestType) {
		if (requestType == null) {
			throw new NullPointerException("Null RequestType");
		}
		JaxpRequest	jaxpRequest	= new JaxpRequest();
		jaxpRequest.setCombinedDecision(requestType.isCombinedDecision());
		jaxpRequest.setReturnPolicyIdList(requestType.isReturnPolicyIdList());
		if (requestType.getAttributes() != null) {
			Iterator<AttributesType>	iterAttributesTypes			= requestType.getAttributes().iterator();
			while (iterAttributesTypes.hasNext()) {
				jaxpRequest.add(JaxpRequestAttributes.newInstance(iterAttributesTypes.next()));
			}
		}
		if (requestType.getMultiRequests() != null && requestType.getMultiRequests().getRequestReference() != null) {
			Iterator<RequestReferenceType>	iterRequestReferenceTypes	= requestType.getMultiRequests().getRequestReference().iterator();
			while (iterRequestReferenceTypes.hasNext()) {
				jaxpRequest.add(JaxpRequestReference.newInstance(iterRequestReferenceTypes.next()));
			}
		}
		if (requestType.getRequestDefaults() != null) {
			jaxpRequest.setRequestDefaults(JaxpRequestDefaults.newInstance(requestType.getRequestDefaults()));
		}
		
		return jaxpRequest;
	}
	
	/**
	 * Creates a new <code>JaxpRequest</code> by loading it from an XML <code>File</code>.
	 * 
	 * @param fileXmlRequest the <code>File</code> containing the Request XML
	 * @return a new <code>JaxpRequest</code> generated by parsing the given XML file 
	 * @throws ParserConfigurationException parser configuration exception
	 * @throws IOException Bad file
	 * @throws SAXException Exception due to SAX
	 * @throws JAXBException JAXB exception
	 */
	public static JaxpRequest load(File fileXmlRequest) throws ParserConfigurationException, IOException, SAXException, JAXBException {
		if (fileXmlRequest == null) {
			throw new NullPointerException("Null File");
		}
		
    	/*
    	 * Create XML document factory and builder
    	 */
		DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, "");
        documentBuilderFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, "");
        documentBuilderFactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
	    documentBuilderFactory.setNamespaceAware(true);
		DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
		
		/*
		 * Parse the file into a Document
		 */
		Document	document	= documentBuilder.parse(fileXmlRequest);
		if (document == null) {
			logger.error("No Document returned parsing {}", fileXmlRequest.getAbsolutePath());
			return null;
		}
		
		NodeList	nodeListRoot	= document.getChildNodes();
		if (nodeListRoot == null || nodeListRoot.getLength() == 0) {
			logger.warn("No child elements of the XML document");
			return null;
		}
		Node		nodeRoot		= nodeListRoot.item(0);
		if (nodeRoot == null || nodeRoot.getNodeType() != Node.ELEMENT_NODE) {
			logger.warn("Root of the document is not an ELEMENT");
			return null;
		}
		
		JAXBContext 				context 			= JAXBContext.newInstance(RequestType.class);
		Unmarshaller 				unmarshaller 		= context.createUnmarshaller();
		JAXBElement<RequestType>	jaxbElementRequest 	= unmarshaller.unmarshal(nodeRoot, RequestType.class);
		if (jaxbElementRequest == null || jaxbElementRequest.getValue() == null) {
			logger.error("JAXB unmarshalling did not return a RequestType node");
			return null;
		}
		return JaxpRequest.newInstance(jaxbElementRequest.getValue());
		
	}
	
	//
	// This main() method should only be used for local testing, and not
	// for running anything in a production environment.
	//
	public static void main(String[] args) { //NOSONAR
        Collection<String> santized = MainUtils.santizeArguments(args);
        if (santized.isEmpty()) {
            return;
        }
		for (String fileName: santized) {
			JaxpRequest	jaxpRequest	= null;
			try {
				jaxpRequest	= JaxpRequest.load(new File(fileName));
			} catch (Exception ex) {
				logger.error("Failed to load {} as a JaxpRequest", fileName, ex);
				continue;
			}
			if (jaxpRequest == null) {
				logger.warn("Null JaxpRequest returned for file {}", fileName);
			} else {
				logger.info("JaxpRequest for file {}={}", fileName, jaxpRequest);
			}
		}
	}

}
